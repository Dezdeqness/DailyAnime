buildscript {
    dependencies {
        apply from: 'dependencies-versions.gradle'
        classpath libs.gradle
        classpath libs.google.services
    }
    repositories {
        mavenCentral()
        google()
    }
}

plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.android.library) apply false
    alias(libs.plugins.google.firebase.crashlytics) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.compose.compiler) apply false
    alias(libs.plugins.arturbosch.detekt)
    alias(libs.plugins.ksp) apply false
}

allprojects {
    dependencies { apply from: "$rootProject.rootDir/dependencies-groups.gradle" }
}

detekt {
    buildUponDefaultConfig = true
    parallel = true
    allRules = false
}

tasks.named("detekt").configure {
    reports {
        // Enable/Disable XML report (default: true)
        xml.required.set(true)
        xml.outputLocation.set(file("build/reports/detekt.xml"))
        // Enable/Disable HTML report (default: true)
        html.required.set(true)
        html.outputLocation.set(file("build/reports/detekt.html"))
        // Enable/Disable TXT report (default: true)
        txt.required.set(true)
        txt.outputLocation.set(file("build/reports/detekt.txt"))
        // Enable/Disable SARIF report (default: false)
        sarif.required.set(true)
        sarif.outputLocation.set(file("build/reports/detekt.sarif"))
        // Enable/Disable MD report (default: false)
        md.required.set(true)
        md.outputLocation.set(file("build/reports/detekt.md"))
        custom {
            // The simple class name of your custom report.
            reportId = "CustomJsonReport"
            outputLocation.set(file("build/reports/detekt.json"))
        }
    }
}


tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

tasks.register("copyGitHooks", Copy) {
    description = "Copies the git hooks from /git-hooks to the .git folder."
    group = "git hooks"
    from("$rootDir/scripts/pre-commit")
    from("$rootDir/scripts/pre-push")
    into("$rootDir/.git/hooks/")
}

tasks.register("installGitHooks", Exec) {
    description = "Installs the pre-check git hooks from /git-hooks."
    group = "git hooks"
    workingDir = rootDir
    commandLine "chmod", "-R", "+x", ".git/hooks/"
    dependsOn "copyGitHooks"
    doLast {
        logger.info("Git hook installed successfully.")
    }
}

afterEvaluate {
    tasks.getByPath(':clean').dependsOn installGitHooks
    tasks.getByPath(':app:preBuild').dependsOn installGitHooks
}

//subprojects {
//    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
//        kotlinOptions {
//            if (project.findProperty("composeCompilerReports") == "true") {
//                freeCompilerArgs += [
//                        "-P",
//                        "plugin:androidx.compose.compiler.plugins.kotlin:reportsDestination=" +
//                                project.buildDir.absolutePath + "/compose_compiler"
//                ]
//            }
//            if (project.findProperty("composeCompilerMetrics") == "true") {
//                freeCompilerArgs += [
//                        "-P",
//                        "plugin:androidx.compose.compiler.plugins.kotlin:metricsDestination=" +
//                                project.buildDir.absolutePath + "/compose_compiler"
//                ]
//            }
//        }
//    }
//}
